{"version":3,"sources":["server.js"],"names":["express","require","cors","mongoose","multer","ffmpeg","fs","path","app","use","json","Db","connect","then","res","console","log","listen","PORT","error","message","join","__dirname","storage","diskStorage","destination","req","file","cb","existsSync","mkdirSync","filename","Date","now","originalname","upload","fileFilter","ext","extname","Error","videoSchema","Schema","name","type","String","required","videos","timestamps","VModel","model","get","readdir","err","files","status","filter","post","single","filePath","qualities","forEach","quality","outputPath","basename","videoCodec","size","output","on","run"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAMK,EAAE,GAAGL,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMM,IAAI,GAAGN,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMO,GAAG,GAAGR,OAAO,EAAnB;AACAQ,GAAG,CAACC,GAAJ,CAAQP,IAAI,EAAZ;AACAM,GAAG,CAACC,GAAJ,CAAQT,OAAO,CAACU,IAAR,EAAR;;AACA,IAAMC,EAAE,GAAG,SAALA,EAAK,GAAI;AACXR,EAAAA,QAAQ,CAACS,OAAT,CAAiB,kCAAjB,EAAqDC,IAArD,CAA0D,UAACC,GAAD,EAAO;AAC7DC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAR,IAAAA,GAAG,CAACS,MAAJ,CAAWC,IAAX,EAAiB,YAAI;AACjBH,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCE,IAApC;AACH,KAFD;AAGH,GALD,WAKS,UAACC,KAAD,EAAS;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACC,OAAlB;AACH,GAPD;AAQH,CATD;;AAUAZ,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBT,OAAO,UAAP,CAAeO,IAAI,CAACc,IAAL,CAAUC,SAAS,GAAG,SAAtB,CAAf,CAAnB;AACA,IAAMJ,IAAI,GAAG,IAAb,C,CACA;;AACA,IAAMK,OAAO,GAAGnB,MAAM,CAACoB,WAAP,CAAmB;AAC/BC,EAAAA,WAAW,EAAC,qBAASC,GAAT,EAAaC,IAAb,EAAkBC,EAAlB,EAAqB;AAC7B,QAAG,CAACtB,EAAE,CAACuB,UAAH,CAAc,QAAd,CAAJ,EAA4B;AACxBvB,MAAAA,EAAE,CAACwB,SAAH,CAAa,QAAb;AACH;;AACD,QAAG,CAACxB,EAAE,CAACuB,UAAH,CAAc,eAAd,CAAJ,EAAmC;AAC/BvB,MAAAA,EAAE,CAACwB,SAAH,CAAa,eAAb;AACH;;AACDF,IAAAA,EAAE,CAAC,IAAD,EAAO,eAAP,CAAF;AACH,GAT8B;AAU/BG,EAAAA,QAAQ,EAAC,kBAASL,GAAT,EAAaC,IAAb,EAAkBC,EAAlB,EAAqB;AAC1BA,IAAAA,EAAE,CAAC,IAAD,EAAOI,IAAI,CAACC,GAAL,KAAWN,IAAI,CAACO,YAAvB,CAAF;AACH;AAZ8B,CAAnB,CAAhB;AAcA,IAAMC,MAAM,GAAG/B,MAAM,CAAC;AAClBmB,EAAAA,OAAO,EAACA,OADU;AAElBa,EAAAA,UAAU,EAAC,oBAASV,GAAT,EAAaC,IAAb,EAAkBC,EAAlB,EAAqB;AAC5B,QAAIS,GAAG,GAAG9B,IAAI,CAAC+B,OAAL,CAAaX,IAAI,CAACO,YAAlB,CAAV;;AACA,QAAGG,GAAG,KAAK,MAAR,IAAkBA,GAAG,KAAK,MAA7B,EAAoC;AAChC,aAAOT,EAAE,CAAC,IAAIW,KAAJ,CAAU,0BAAV,CAAD,CAAT;AACH;;AACDX,IAAAA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAF;AACH;AARiB,CAAD,CAArB,C,CAWA;;AAEA,IAAMY,WAAW,GAAG,IAAIrC,QAAQ,CAACsC,MAAb,CAAoB;AACpCC,EAAAA,IAAI,EAAC;AACDC,IAAAA,IAAI,EAACC,MADJ;AAEDC,IAAAA,QAAQ,EAAC;AAFR,GAD+B;AAKpCC,EAAAA,MAAM,EAAC,CAAC;AAACH,IAAAA,IAAI,EAACC;AAAN,GAAD;AAL6B,CAApB,EAOlB;AAACG,EAAAA,UAAU,EAAC;AAAZ,CAPkB,CAApB;AAQA,IAAMC,MAAM,GAAG7C,QAAQ,CAAC8C,KAAT,CAAe,QAAf,EAAwBT,WAAxB,CAAf;AAEAhC,GAAG,CAAC0C,GAAJ,CAAQ,SAAR,EAAmB,UAACxB,GAAD,EAAMZ,GAAN,EAAc;AAC7BR,EAAAA,EAAE,CAAC6C,OAAH,CAAW,eAAX,EAA4B,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC1C,QAAID,GAAJ,EAAS;AACPtC,MAAAA,GAAG,CAACwC,MAAJ,CAAW,GAAX,EAAgB5C,IAAhB,CAAqB;AAAEU,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAED,QAAM0B,MAAM,GAAGO,KAAK,CAACE,MAAN,CAAa,UAAA5B,IAAI;AAAA,aAAIpB,IAAI,CAAC+B,OAAL,CAAaX,IAAb,MAAuB,MAA3B;AAAA,KAAjB,CAAf;AACAb,IAAAA,GAAG,CAACJ,IAAJ,CAAS;AAAEoC,MAAAA,MAAM,EAANA;AAAF,KAAT;AACD,GARD;AASD,CAVH;AAaAtC,GAAG,CAACgD,IAAJ,CAAS,SAAT,EAAoBrB,MAAM,CAACsB,MAAP,CAAc,OAAd,CAApB,EAA4C,iBAAM/B,GAAN,EAAUZ,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACjC4C,UAAAA,QADiC,GACtBhC,GAAG,CAACC,IAAJ,CAASpB,IADa;AAGjCoD,UAAAA,SAHiC,GAGrB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,IAArB,CAHqB;AAIvCA,UAAAA,SAAS,CAACC,OAAV,CAAkB,UAAAC,OAAO,EAAG;AACzB,gBAAMC,UAAU,GAAGvD,IAAI,CAACc,IAAL,CAAUC,SAAV,EAAqB,eAArB,YAAyCf,IAAI,CAACwD,QAAL,CAAcL,QAAd,EAAwBnD,IAAI,CAAC+B,OAAL,CAAaoB,QAAb,CAAxB,CAAzC,cAA4FG,OAA5F,WAAnB;AACAxD,YAAAA,MAAM,CAACqD,QAAD,CAAN,CACCM,UADD,CACY,SADZ,EAECC,IAFD,aAEWJ,OAFX,GAGCK,MAHD,CAGQJ,UAHR,EAICK,EAJD,CAII,KAJJ,EAIW,YAAI;AACXpD,cAAAA,OAAO,CAACC,GAAR,+BAAmC6C,OAAnC;AACH,aAND,EAOCM,EAPD,CAOI,OAPJ,EAOa,UAACf,GAAD,EAAS;AAClBrC,cAAAA,OAAO,CAACI,KAAR,oCAA0CiC,GAAG,CAAChC,OAA9C;AACD,aATH,EAUCgD,GAVD;AAWF,WAbD;;AAJuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5C;AA0BAzD,EAAE","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst mongoose = require('mongoose');\r\nconst multer = require('multer')\r\nconst ffmpeg = require('fluent-ffmpeg');\r\nconst fs = require('fs')\r\nconst path = require('path')\r\n\r\nconst app = express();\r\napp.use(cors())\r\napp.use(express.json())\r\nconst Db = ()=>{\r\n    mongoose.connect('mongodb://localhost:27017/videos').then((res)=>{\r\n        console.log('Database connected ')\r\n        app.listen(PORT, ()=>{\r\n            console.log('Server connected on ', PORT )\r\n        })\r\n    }).catch((error)=>{\r\n        console.log(error.message)\r\n    })\r\n}\r\napp.use('/public', express.static(path.join(__dirname + '/public')))\r\nconst PORT = 8000\r\n//Multer\r\nconst storage = multer.diskStorage({\r\n    destination:function(req,file,cb){\r\n        if(!fs.existsSync('public')){\r\n            fs.mkdirSync('public')\r\n        }\r\n        if(!fs.existsSync('public/videos')){\r\n            fs.mkdirSync('public/videos')\r\n        }\r\n        cb(null, 'public/videos')\r\n    },\r\n    filename:function(req,file,cb){\r\n        cb(null, Date.now()+file.originalname)\r\n    }\r\n})\r\nconst upload = multer({\r\n    storage:storage,\r\n    fileFilter:function(req,file,cb){\r\n        var ext = path.extname(file.originalname)\r\n        if(ext !== '.mkv' && ext !== '.mp4'){\r\n            return cb(new Error('Only videos are allowed!'))\r\n        }\r\n        cb(null, true)\r\n    }\r\n})\r\n\r\n//MODEL\r\n\r\nconst videoSchema = new mongoose.Schema({\r\n    name:{\r\n        type:String,\r\n        required:true\r\n    },\r\n    videos:[{type:String}]\r\n\r\n},{timestamps:true})\r\nconst VModel = mongoose.model('videos',videoSchema)\r\n\r\napp.get('/videos', (req, res) => {\r\n    fs.readdir('public/videos', (err, files) => {\r\n      if (err) {\r\n        res.status(500).json({ message: 'Error reading video directory' });\r\n        return;\r\n      }\r\n  \r\n      const videos = files.filter(file => path.extname(file) === '.mp4');\r\n      res.json({ videos });\r\n    });\r\n  });\r\n\r\n\r\napp.post('/create', upload.single('video'), async(req,res)=>{\r\n     const filePath = req.file.path\r\n     \r\n     const qualities = [240, 360, 480, 720, 1080]\r\n     qualities.forEach(quality =>{\r\n        const outputPath = path.join(__dirname, 'public/videos', `${path.basename(filePath, path.extname(filePath))}_${quality}p.mp4`)\r\n        ffmpeg(filePath)\r\n        .videoCodec('libx264')\r\n        .size(`?x${quality}`)\r\n        .output(outputPath)\r\n        .on('end', ()=>{\r\n            console.log(`Video transcoded to ${quality}`)\r\n        })\r\n        .on('error', (err) => {\r\n            console.error(`Error transcoding video: ${err.message}`);\r\n          })\r\n        .run()\r\n     })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nDb()\r\n"],"file":"server.dev.js"}