{"version":3,"sources":["server.js"],"names":["express","require","cors","multer","fs","mongoose","app","use","ffmpeg","Db","then","res","console","log","PORT","error","json","message","path","join","__dirname","diskStorage","destination","req","file","cb","existsSync","mkdirSync","storage","Date","now","originalname","upload","fileFilter","extname","ext","Error","Schema","String","required","videos","timestamps","VModel","model","videoSchema","get","readdir","err","files","status","filter","type","single","filePath","concat","basename","quality","videoCodec","size","output","outputPath","run","qualities"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QADfD,SAAUC,QAAQ,YAGlBE,OAASF,QAAQ,UAFjBC,OAAOD,QAAQ,iBAIfG,GAAKH,QAAQ,MAHbI,KAAQJ,QAAGA,QACXE,IAAMH,UAMZM,IAAIC,IAAIL,QALRI,IAAME,IAAAA,QAASP,QAOf,IAAMQ,GAAK,WANLL,SAAKH,QAAO,oCAAlBS,KAAA,SAAAC,GAQQC,QAAQC,IAAI,uBAPVP,IAAGL,OAAQa,KAAD,WASRF,QAAQC,IAAI,uBAAwBC,UAV1CV,MAIM,SAAZW,GACQf,QAAQgB,IAARD,EAARE,YAEIZ,IAAAA,IAAAA,UAAiBL,QAAA,OAAAkB,KAAAC,KAAAC,UAAoCV,aACjDE,IAAAA,KAAQC,IAEJD,QAAQC,OAAIQ,YAAA,CACfC,YAFD,SAAAC,EAAAC,EAAAC,GAFJrB,GAKSsB,WAACX,WACEF,GAARc,UAAkBV,UAP1Bb,GAAAsB,WAAA,kBAmBYtB,GAAGuB,UAAU,iBARfF,EAAG,KACb,kBACMG,SAAO,SAAUP,EAAAA,EAAAA,GACnBC,EAAAA,KAAYO,KAAAC,MAAAN,EAAAO,iBAGPC,OAAA7B,OAAA,CAWLyB,QAAQA,QAVJK,WAAOP,SAAWH,EAAAC,EAAAC,GACZ,IAACE,EAAHT,KAAagB,QAAAV,EAAbO,cACH,GAAA,SAAAI,GAAA,SAAAA,EAYG,OAAOV,EAAG,IAAIW,MAAM,6BAnBGX,EAAA,MAAA,MAe/BG,YADkB,IAAAvB,SAAAgC,OAAA,CAElBJ,KAAAA,CACQE,KAAGG,OAaPC,UAAS,GAXLC,OAAA,CAAA,CAAOf,KAAGa,UAepB,CAACG,YAAW,IAbJC,OAAOrC,SAATsC,MAAA,SAAAC,aAPctC,IAWtBuC,IAAA,UAAA,SAAAtB,EAAAZ,GAaIP,GAAG0C,QAAQ,gBAAiB,SAACC,EAAKC,GAXhCJ,GAAAA,EACGjC,EAAAsC,OAAA,KAAAjC,KAAA,CAAAC,QAAA,sCADH2B,CAKFJ,IAAQA,EAAAQ,EAAAE,OAAA,SAAA1B,GAAA,MAAA,SAAAN,KAAAgB,QAAAV,KAAC2B,EAAKb,KAAAA,CAAAA,OAAAA,SAGlBhC,IAAMoC,KAAAA,UAASrC,OAAA+C,OAAe,SAASR,SAAvCrB,GAAuCqB,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAE/BS,EAAW9B,EAAAC,KAACD,KAEL,CAAA,IAAA,IAAA,IAAA,IAAA,MACH0B,QAAYjC,SAAAA,GAAOC,IAAAA,EAASC,KAAAC,KAAAC,UAAA,gBAAA,GAAAkC,OAAApC,KAAAqC,SAAAF,EAAAnC,KAAAgB,QAAAmB,IAAA,KAAAC,OAAAE,EAAA,UAAhChD,OAAA6C,GACAI,WAAA,WACDC,KAFC,KAAAJ,OAEDE,IAiBEG,OAAOC,GAfJpB,GAAAA,MAASQ,WAAiBpC,QAASsB,IAAT,uBAAAoB,OAAAE,MAC5BxC,GAAJ,QAAS,SAAA+B,GAAQnC,QAAN4B,MAAM,4BAAAc,OAANd,EAAAA,YAPbqB,QAHmCjB,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,YAmBlCkB","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst mongoose = require('mongoose');\r\nconst multer = require('multer')\r\nconst ffmpeg = require('fluent-ffmpeg');\r\nconst fs = require('fs')\r\nconst path = require('path')\r\n\r\nconst app = express();\r\napp.use(cors())\r\napp.use(express.json())\r\nconst Db = ()=>{\r\n    mongoose.connect('mongodb://localhost:27017/videos').then((res)=>{\r\n        console.log('Database connected ')\r\n        app.listen(PORT, ()=>{\r\n            console.log('Server connected on ', PORT )\r\n        })\r\n    }).catch((error)=>{\r\n        console.log(error.message)\r\n    })\r\n}\r\napp.use('/public', express.static(path.join(__dirname + '/public')))\r\nconst PORT = 8000\r\n//Multer\r\nconst storage = multer.diskStorage({\r\n    destination:function(req,file,cb){\r\n        if(!fs.existsSync('public')){\r\n            fs.mkdirSync('public')\r\n        }\r\n        if(!fs.existsSync('public/videos')){\r\n            fs.mkdirSync('public/videos')\r\n        }\r\n        cb(null, 'public/videos')\r\n    },\r\n    filename:function(req,file,cb){\r\n        cb(null, Date.now()+file.originalname)\r\n    }\r\n})\r\nconst upload = multer({\r\n    storage:storage,\r\n    fileFilter:function(req,file,cb){\r\n        var ext = path.extname(file.originalname)\r\n        if(ext !== '.mkv' && ext !== '.mp4'){\r\n            return cb(new Error('Only videos are allowed!'))\r\n        }\r\n        cb(null, true)\r\n    }\r\n})\r\n\r\n//MODEL\r\n\r\nconst videoSchema = new mongoose.Schema({\r\n    name:{\r\n        type:String,\r\n        required:true\r\n    },\r\n    videos:[{type:String}]\r\n\r\n},{timestamps:true})\r\nconst VModel = mongoose.model('videos',videoSchema)\r\n\r\napp.get('/videos', (req, res) => {\r\n    fs.readdir('public/videos', (err, files) => {\r\n      if (err) {\r\n        res.status(500).json({ message: 'Error reading video directory' });\r\n        return;\r\n      }\r\n  \r\n      const videos = files.filter(file => path.extname(file) === '.mp4');\r\n      res.json({ videos });\r\n    });\r\n  });\r\n\r\n\r\napp.post('/create', upload.single('video'), async(req,res)=>{\r\n     const filePath = req.file.path\r\n     \r\n     const qualities = [240, 360, 480, 720, 1080]\r\n     qualities.forEach(quality =>{\r\n        const outputPath = path.join(__dirname, 'public/videos', `${path.basename(filePath, path.extname(filePath))}_${quality}p.mp4`)\r\n        ffmpeg(filePath)\r\n        .videoCodec('libx264')\r\n        .size(`?x${quality}`)\r\n        .output(outputPath)\r\n        .on('end', ()=>{\r\n            console.log(`Video transcoded to ${quality}`)\r\n        })\r\n        .on('error', (err) => {\r\n            console.error(`Error transcoding video: ${err.message}`);\r\n          })\r\n        .run()\r\n     })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nDb()\r\n"]}